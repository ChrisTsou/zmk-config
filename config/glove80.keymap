#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/key-labels/glove80.h"
#include "zmk-helpers/helper.h"
#include "bluetooth.dtsi"

// Layer definitions
#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define FUN  4
#define MGC  5

#define XXX &none
#define ___ &trans

// Global settings
#define QUICK_TAP_MS 175

// Configure sticky key behavior
&sk {
    release-after-ms = <500>;  // Release sticky key after 500ms
    quick-release;             // Release immediately after next keypress
};

// Key position definitions using zmk-helpers
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH0 LH1 LH2 LH3 LH4 LH5 RH0 RH1 RH2 RH3 RH4 RH5

/ {
    behaviors {
        // Left homerow mods
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        // Right homerow mods  
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // Layer tap behaviors
        lt_l: layer_tap_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        lt_r: layer_tap_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
        
        // Custom one-shot shift that won't trigger caps lock on repeated use
        custom_shift: custom_shift_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&macro_tap &sk LSHFT>;
        };
    };
};

// Cancel key - cancels caps-word, sticky keys/layers (caps-lock requires manual toggle)
#define CANCEL &kp K_CANCEL

/*
 * ═══════════════════════════════════════════════════════════════
 * MAGIC SHIFT - Custom tap-dance shift behavior
 * ═══════════════════════════════════════════════════════════════
 * Single tap: one-shot shift, Double tap: caps_word, Shift+tap: caps_lock
 * ═══════════════════════════════════════════════════════════════
 */
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&shift_morph>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(shift_morph, bindings = <&shift_tap_dance>, <&kp CAPS>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_TAP_DANCE(shift_tap_dance, bindings = <&sk LSHFT>, <&caps_word>;
              tapping-term-ms = <500>;)

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&none           &none           &none           &none           &none                                                                                                           &none           &none           &none           &none           &none
&none           &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                                                                              &kp N6      &kp N7          &kp N8          &kp N9          &kp N0          &none
&sk LSHFT       &kp Z           &kp Y           &kp U           &kp O           &kp SEMI                                                                            &kp Q       &kp L           &kp D           &kp P           &kp X           &sk RSHFT
&kp W           &hml LGUI C     &hml LALT I     &hml LCTRL E    &hml LSHFT A    &kp COMMA                                                                           &kp K       &hmr RSHFT H    &hmr RCTRL T    &hmr RALT N     &hmr RGUI S     &kp F
&sk LSHFT       &kp SQT         &kp MINUS       &kp EQUAL       &kp DOT         &kp FSLH    &lt_l FUN ESC   &kp TAB     &lt_l NAV INS &kp CAPS &none    &kp RET         &kp J       &kp M           &kp G           &kp B           &kp V           &sk RSHFT
&magic MGC 0    &kp BSLH        &kp LPAR        &kp RPAR        &kp GRAVE                   &lt_l NUM SPACE MAGIC_SHIFT CANCEL        &kp DEL  &kp BSPC &lt_r SYM R                 &kp LBKT        &kp LBRC        &kp RBRC        &kp RBKT        &magic MGC 0
            >;
        };

        symbol_layer {
            bindings = <
                &none     &none      &none      &none      &none                                                                           &none      &none      &none     &none   &none
                &kp GRAVE &kp RBKT   &kp LPAR   &kp RPAR   &kp COMMA   &kp DOT                                                  &none      &none      &none      &none     &none   &none
                &kp LBKT  &kp EXCL   &kp LBRC   &kp RBRC   &kp SEMI    &kp QMARK                                            &kp GRAVE  &kp RSHFT  &kp RCTRL   &kp RALT  &kp RGUI   &none
                &kp HASH  &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR    &kp STAR                                               &kp DQT   &kp BSPC    &kp TAB  &kp SPACE   &kp RET   &none
                &kp TILDE &kp LT     &kp PIPE   &kp MINUS  &kp GT      &kp FSLH   &kp BSLH    &kp DOT  &kp STAR   &none   &none   &none    &kp SQT    &kp DEL      &none    &kp INS   &kp ESC   &none
                &none     &kp AMPS   &kp SQT    &kp DQT    &kp PLUS               &kp PRCNT  &kp COLON    &kp AT   &none   &none   &none                 &none      &none      &none     &none   &none
            >;
        };

        number_layer {
            bindings = <
                &none     &none     &none      &none      &none                                                                        &none     &none      &none      &none      &none
                &none     &none     &none      &none      &none   &none                                                      &none  &kp HASH  &kp DLLR  &kp CARET  &kp TILDE   &kp EXCL
                &none     &none     &none      &none      &none   &none                                                      &none    &kp N7    &kp N8     &kp N9  &kp COLON  &kp PRCNT
                &none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                                  &kp UNDER    &kp N4    &kp N5     &kp N6  &kp MINUS   &kp PLUS
                &none     &none     &none      &none      &none   &none   &none   &none   &none     &kp LT   &kp GT  &kp COMMA      &none    &kp N1    &kp N2     &kp N3   &kp FSLH   &kp STAR
                &none     &none     &none      &none      &none           &none   &none   &none  &kp EQUAL  &kp DOT     &kp N0               &trans    &trans     &trans     &trans     &kp AT
            >;
        };

        nav_layer {
            bindings = <
                &none     &none     &none      &none      &none                                                               &none      &none      &none      &none   &none
                &none     &none     &none      &none      &none   &none                                             &none     &none      &none      &none      &none   &none
                &none     &none     &none      &none      &none   &none                                             &none     &none      &none      &none      &none   &none
                &none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                             &none  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT   &none
                &none     &none     &none      &none      &none   &none   &none   &none   &none   &none   &none   &none   &none  &kp HOME  &kp PG_DN  &kp PG_UP    &kp END   &none
                &none     &none     &none      &none      &none           &none   &none   &none   &none   &none   &none             &none      &none      &none      &none   &none
            >;
        };

        function_layer {
            bindings = <
                &none   &none   &none   &none   &none                                                                                       &none         &none         &none    &none    &none
                &none   &none   &none   &none   &none   &none                                                                       &none   &none  &kp C_BRI_DN  &kp C_BRI_UP    &none    &none
                &none   &none   &none   &none   &none   &none                                                                       &none  &kp F7        &kp F8        &kp F9  &kp F10  &kp F13
                &none   &none   &none   &none   &none   &none                                                                       &none  &kp F4        &kp F5        &kp F6  &kp F11  &kp F14
                &none   &none   &none   &none   &none   &none   &none   &none   &none    &kp C_PP    &kp C_PREV    &kp C_NEXT       &none  &kp F1        &kp F2        &kp F3  &kp F12  &kp F15
                &none   &none   &none   &none   &none           &none   &none   &none  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP               &none      &kp C_RW      &kp C_FF    &none    &none
            >;
        };

        magic_layer {
            bindings = <
                &bt BT_CLR            &none            &none            &none            &none                                                                                     &none   &none   &none   &none  &bt BT_CLR_ALL
                &none                 &none            &none            &none            &none            &none                                                            &none   &none   &none   &none   &none           &none
                &sys_reset  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                            &none   &none   &none   &none   &none      &sys_reset
                &none       &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                            &none   &none   &none   &none   &none           &none
                &bootloader           &none            &none            &none            &none            &none   &bt_2          &bt_3                &none   &none   &none   &none   &none   &none   &none   &none   &none     &bootloader
                &none                 &none            &none            &none            &none                    &bt_0          &bt_1         &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };
    };
};