#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/key-labels/glove80.h"
#include "zmk-helpers/helper.h"
#include "bluetooth.dtsi"

// Layer definitions
#define BASE 0
#define SYM  1
#define ASSNUM  2
#define NAV  3
#define FUN  4
#define MGC  5

#define XXX &none   
#define ___ &trans   

// Configure sticky key behavior
&sk {
    release-after-ms = <500>;  // Release sticky key after 500ms
    quick-release;             // Release immediately after next keypress
};

// Key position definitions using zmk-helpers
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH0 LH1 LH2 LH3 LH4 LH5 RH0 RH1 RH2 RH3 RH4 RH5

/* Troubleshooting

    Noticeable delay when tapping HRMs: Increase require-prior-idle-ms. As a rule of thumb, you want to set it to at least 10500/x where x is your (relaxed) WPM for English prose.3
    False negatives (same-hand): Reduce tapping-term-ms (or disable hold-trigger-key-positions)
    False negatives (cross-hand): Reduce require-prior-idle-ms (or set flavor to hold-preferred -- to continue using hold-trigger-on-release, you must apply this patch to ZMK
    False positives (same-hand): Increase tapping-term-ms
    False positives (cross-hand): Increase require-prior-idle-ms (or set flavor to tap-preferred, which requires holding HRMs past tapping term to activate)
*/
#define TAP_TERM          150
#define PRIOR_IDLE        150
#define QUICK_TAP         200

#define HOMEROW_FLAVOR    "balanced"
#define THUMB_FLAVOR      "balanced"

#define PINKY_TAP_TERM    (TAP_TERM + 130)
#define RING_TAP_TERM     (TAP_TERM + 90)
#define MIDDLE_TAP_TERM   (TAP_TERM + 60)
#define INDEX_TAP_TERM    (TAP_TERM + 40)
#define THUMB_TAP_TERM    (TAP_TERM + 50)

#define PINKY_PRIOR_IDLE  (PRIOR_IDLE)
#define RING_PRIOR_IDLE   (PRIOR_IDLE)
#define MIDDLE_PRIOR_IDLE (PRIOR_IDLE)
#define INDEX_PRIOR_IDLE  (PRIOR_IDLE)
#define THUMB_PRIOR_IDLE  (PRIOR_IDLE - 50)

#define PINKY_QUICK_TAP   (QUICK_TAP)
#define RING_QUICK_TAP    (QUICK_TAP)
#define MIDDLE_QUICK_TAP  (QUICK_TAP)
#define INDEX_QUICK_TAP   (QUICK_TAP)
#define THUMB_QUICK_TAP   (QUICK_TAP + 50)

/*
 * Per-finger hold-tap behaviors using urob's helpers
 * Each finger gets optimized timing based on finger strength and dexterity
 */

// Left hand hold-taps (generic)
ZMK_HOLD_TAP(ht_l_p, 
    bindings = <&kp>, <&kp>; 
    flavor = HOMEROW_FLAVOR; 
    tapping-term-ms = <PINKY_TAP_TERM>;
    quick-tap-ms = <PINKY_QUICK_TAP>; 
    require-prior-idle-ms = <PINKY_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_R THUMBS>; 
    hold-trigger-on-release;)

ZMK_HOLD_TAP(ht_l_r,
    bindings = <&kp>, <&kp>;
    flavor = HOMEROW_FLAVOR; 
    tapping-term-ms = <RING_TAP_TERM>;
    quick-tap-ms = <RING_QUICK_TAP>; 
    require-prior-idle-ms = <RING_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_R THUMBS>; 
    hold-trigger-on-release;)

ZMK_HOLD_TAP(ht_l_m,
    bindings = <&kp>, <&kp>;
    flavor = HOMEROW_FLAVOR; 
    tapping-term-ms = <MIDDLE_TAP_TERM>;
    quick-tap-ms = <MIDDLE_QUICK_TAP>; 
    require-prior-idle-ms = <MIDDLE_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_R THUMBS>; 
    hold-trigger-on-release;)

ZMK_HOLD_TAP(ht_l_i,
    bindings = <&kp>, <&kp>;
    flavor = HOMEROW_FLAVOR; 
    tapping-term-ms = <INDEX_TAP_TERM>;
    quick-tap-ms = <INDEX_QUICK_TAP>; 
    require-prior-idle-ms = <INDEX_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_R THUMBS>; 
    hold-trigger-on-release;)

// Right hand hold-taps (generic)
ZMK_HOLD_TAP(ht_r_i,
    bindings = <&kp>, <&kp>;
    flavor = HOMEROW_FLAVOR; 
    tapping-term-ms = <INDEX_TAP_TERM>;
    quick-tap-ms = <INDEX_QUICK_TAP>; 
    require-prior-idle-ms = <INDEX_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_L THUMBS>; 
    hold-trigger-on-release;)

ZMK_HOLD_TAP(ht_r_m,
    bindings = <&kp>, <&kp>;
    flavor = HOMEROW_FLAVOR; 
    tapping-term-ms = <MIDDLE_TAP_TERM>;
    quick-tap-ms = <MIDDLE_QUICK_TAP>; 
    require-prior-idle-ms = <MIDDLE_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_L THUMBS>; 
    hold-trigger-on-release;)

ZMK_HOLD_TAP(ht_r_r,
    bindings = <&kp>, <&kp>;
    flavor = HOMEROW_FLAVOR; 
    tapping-term-ms = <RING_TAP_TERM>;
    quick-tap-ms = <RING_QUICK_TAP>; 
    require-prior-idle-ms = <RING_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_L THUMBS>; 
    hold-trigger-on-release;)

ZMK_HOLD_TAP(ht_r_p,
    bindings = <&kp>, <&kp>;
    flavor = HOMEROW_FLAVOR; 
    tapping-term-ms = <PINKY_TAP_TERM>;
    quick-tap-ms = <PINKY_QUICK_TAP>; 
    require-prior-idle-ms = <PINKY_PRIOR_IDLE>;
    hold-trigger-key-positions = <KEYS_L THUMBS>; 
    hold-trigger-on-release;)

// Thumb layer-taps
ZMK_HOLD_TAP(lt_l_t,
    bindings = <&mo>, <&kp>;
    flavor = THUMB_FLAVOR; 
    tapping-term-ms = <THUMB_TAP_TERM>;
    quick-tap-ms = <THUMB_QUICK_TAP>; 
    require-prior-idle-ms = <THUMB_PRIOR_IDLE>;)

ZMK_HOLD_TAP(lt_r_t,
    bindings = <&mo>, <&kp>;
    flavor = THUMB_FLAVOR; 
    tapping-term-ms = <THUMB_TAP_TERM>;
    quick-tap-ms = <THUMB_QUICK_TAP>; 
    require-prior-idle-ms = <THUMB_PRIOR_IDLE>;)

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
        
        // Custom one-shot shift that won't trigger caps lock on repeated use
        custom_shift: custom_shift_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&macro_tap &sk LSHFT>;
        };
    };
};

/*
 * ═══════════════════════════════════════════════════════════════
 * ENHANCED CANCEL - Cancel all states and return to base layer
 * ═══════════════════════════════════════════════════════════════
 * Cancels caps-word, sticky keys/layers, auto-layers AND returns to base layer
 * ═══════════════════════════════════════════════════════════════
 */
#define CANCEL &cancel_macro
ZMK_MACRO(cancel_macro, bindings = <&kp K_CANCEL &to BASE>; wait-ms = <0>; tap-ms = <5>;)

// Symbol key list for auto-layer continue behavior
#define SYMBOLS EXCL AT HASH DLLR PRCNT CARET AMPS STAR LPAR RPAR \
                MINUS UNDER EQUAL PLUS LBKT RBKT LBRC RBRC BSLH PIPE \
                SEMI COLON SQT DQT COMMA LT DOT GT FSLH QMARK GRAVE TILDE

/*
 * ═══════════════════════════════════════════════════════════════
 * CUSTOM AUTO-LAYER - Only deactivates on space/escape/cancel
 * ═══════════════════════════════════════════════════════════════
 */
ZMK_AUTO_LAYER(c_auto, 
    ignore-alphas; ignore-numbers; ignore-modifiers;
    continue-list = <SYMBOLS BSPC DEL TAB RET INS CAPS SPACE>;)
#define C_AUTO &c_auto

/*
 * ═══════════════════════════════════════════════════════════════
 * MAGIC SHIFT - Custom tap-dance shift behavior
 * ═══════════════════════════════════════════════════════════════
 * Single tap: one-shot shift, Double tap: caps_word, Shift+tap: caps_lock
 * ═══════════════════════════════════════════════════════════════
 */
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&shift_morph>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <THUMB_QUICK_TAP>;)
ZMK_MOD_MORPH(shift_morph, bindings = <&shift_tap_dance>, <&kp CAPS>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_TAP_DANCE(shift_tap_dance, bindings = <&sk LSHFT>, <&caps_word>;
              tapping-term-ms = <500>;)
              
/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
XXX           XXX             XXX             XXX              XXX                                                                                                                         XXX              XXX              XXX             XXX             XXX   
XXX           XXX             XXX             XXX              XXX              XXX                                                                                               XXX      XXX              XXX              XXX             XXX             XXX   
XXX           &kp Z           &kp Y           &kp U            &kp O            &kp SEMI                                                                                          &kp Q    &kp L            &kp D            &kp P           &kp X           XXX   
&kp W         &ht_l_p LGUI C  &ht_l_r LALT I  &ht_l_m LCTRL E  &ht_l_i LSHFT A  &kp COMMA                                                                                         &kp K    &ht_r_i RSHFT H  &ht_r_m RCTRL T  &ht_r_r RALT N  &ht_r_p RGUI S  &kp F
XXX           &kp SQT         &kp MINUS       &kp EQUAL        &kp DOT          &kp FSLH    &lt_l_t FUN ESC       XXX        XXX              XXX     XXX          &kp RET        &kp J    &kp M            &kp G            &kp B           &kp V           XXX   
&magic MGC 0  XXX             XXX             &kp BSPC         &kp DEL                      &lt_l_t ASSNUM SPACE  &kp TAB    &lt_l_t NAV INS  XXX     MAGIC_SHIFT  &lt_r_t SYM R           &kp DEL          &kp BSPC         XXX             XXX             &magic MGC 0
            >;
        };

        layer_Symbol {
            bindings = <
    XXX         XXX         XXX         XXX         XXX                                                                              XXX         XXX        XXX         XXX         XXX   
    XXX         XXX         XXX         XXX         XXX         XXX                                                         XXX        XXX         XXX        XXX         XXX         XXX   
    ___   &kp LBKT   &kp LBRC   &kp PIPE  &kp QMARK   &kp HASH                                                   &kp DLLR  &kp STAR   &kp AMPS  &kp RBRC   &kp RBKT      ___
 &kp SEMI  &kp TILDE     &kp LT   &kp LPAR   &kp FSLH  &kp COMMA                                                    &kp DQT  &kp EXCL   &kp RPAR    &kp GT  &kp CARET  &kp GRAVE
    XXX       &kp SQT  &kp MINUS  &kp EQUAL    &kp DOT     &kp AT  ___      ___      ___      ___      ___      ___     &kp PRCNT   &kp DOT  &kp COLON  &kp PLUS  &kp UNDER      XXX   
    XXX         XXX         XXX        ___       ___                 ___      ___      ___      ___      ___      ___                   ___        ___        XXX         XXX         XXX   
            >;
        };

        layer_Assnum {
            bindings = <
     XXX         XXX         XXX        XXX         XXX                                                                            XXX      XXX      XXX        XXX      XXX   
     XXX         XXX         XXX        XXX         XXX         XXX                                                         XXX      XXX      XXX      XXX        XXX      XXX   
 &kp COLON  &kp PRCNT   &kp FSLH  &kp STAR  &kp UNDER      XXX                                                         &kp O   &kp N7  &kp N8  &kp N9  &kp DLLR   XXX   
 &kp TILDE   &kp EXCL     &kp LT    &kp GT  &kp EQUAL  &kp COMMA                                                      &kp X   &kp N4  &kp N5  &kp N6  &kp HASH   XXX   
     XXX     &kp CARET  &kp MINUS  &kp PLUS    &kp DOT      XXX     ___      ___      ___      ___      ___      ___      &kp B   &kp N1  &kp N2  &kp N3    &kp AT   XXX   
     XXX      &kp PIPE   &kp AMPS    ___        ___                ___      ___      ___      ___      ___      &kp N0   ___     ___      XXX        XXX      XXX   
            >;
        };

        nav_layer {
            bindings = <
                XXX        XXX        XXX         XXX         XXX                                                                  XXX         XXX         XXX         XXX      XXX   
                XXX        XXX        XXX         XXX         XXX      XXX                                                XXX        XXX         XXX         XXX         XXX      XXX   
                XXX        XXX        XXX         XXX         XXX      XXX                                                XXX        XXX         XXX         XXX         XXX      XXX   
                XXX     &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   XXX                                                XXX     &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT   XXX   
                XXX        XXX        XXX         XXX         XXX      XXX      XXX      XXX      XXX      XXX      XXX      XXX      XXX     &kp HOME  &kp PG_DN  &kp PG_UP    &kp END   XXX   
                XXX        XXX        XXX         XXX         XXX              XXX      XXX      XXX      XXX      XXX      XXX                XXX         XXX         XXX         XXX      XXX   
            >;
        };

        function_layer {
            bindings = <
                XXX      XXX      XXX      XXX      XXX                                                                                          XXX            XXX            XXX       XXX       XXX   
                XXX      XXX      XXX      XXX      XXX      XXX                                                                          XXX      XXX     &kp C_BRI_DN  &kp C_BRI_UP    XXX       XXX   
                XXX      XXX      XXX      XXX      XXX      XXX                                                                          XXX     &kp F7        &kp F8        &kp F9  &kp F10  &kp F13
                XXX      XXX      XXX      XXX      XXX      XXX                                                                          XXX     &kp F4        &kp F5        &kp F6  &kp F11  &kp F14
                XXX      XXX      XXX      XXX      XXX      XXX      XXX      XXX      XXX       &kp C_PP    &kp C_PREV    &kp C_NEXT       XXX     &kp F1        &kp F2        &kp F3  &kp F12  &kp F15
                XXX      XXX      XXX      XXX      XXX              XXX      XXX      XXX     &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP               XXX         &kp C_RW      &kp C_FF    XXX       XXX   
            >;
        };

        magic_layer {
            bindings = <
                &bt BT_CLR            XXX               XXX               XXX               XXX                                                                                        XXX      XXX      XXX      XXX     &bt BT_CLR_ALL
                XXX                    XXX               XXX               XXX               XXX               XXX                                                               XXX      XXX      XXX      XXX      XXX              XXX   
                &sys_reset  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                            XXX      XXX      XXX      XXX      XXX         &sys_reset
                XXX          &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                            XXX      XXX      XXX      XXX      XXX              XXX   
                &bootloader           XXX               XXX               XXX               XXX               XXX      &bt_2          &bt_3                XXX      XXX      XXX      XXX      XXX      XXX      XXX      XXX      XXX        &bootloader
                XXX                    XXX               XXX               XXX               XXX                       &bt_0          &bt_1         &out OUT_USB   XXX      XXX      XXX              XXX      XXX      XXX      XXX              XXX   
            >;
        };
    };
};